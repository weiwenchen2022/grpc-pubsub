// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: pubsub.proto

package pubsub

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pubsub_Subscribe_FullMethodName  = "/pubsub.Pubsub/Subscribe"
	Pubsub_Publish_FullMethodName    = "/pubsub.Pubsub/Publish"
	Pubsub_Channels_FullMethodName   = "/pubsub.Pubsub/Channels"
	Pubsub_NumSub_FullMethodName     = "/pubsub.Pubsub/NumSub"
	Pubsub_PSubscribe_FullMethodName = "/pubsub.Pubsub/PSubscribe"
	Pubsub_NumPat_FullMethodName     = "/pubsub.Pubsub/NumPat"
)

// PubsubClient is the client API for Pubsub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubsubClient interface {
	// Subscribes the client to the specified channels.
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Pubsub_SubscribeClient, error)
	// Posts a message to the given channel.
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishReply, error)
	// Lists the currently active channels.
	//
	// An active channel is a Pub/Sub channel with one or more subscribers (excluding clients
	// subscribed to patterns).
	// If no pattern is specified, all the channels are listed, otherwise if pattern is specified
	// only channels matching the specified glob-style pattern are listed.
	Channels(ctx context.Context, in *ChannelsRequest, opts ...grpc.CallOption) (*ChannelsReply, error)
	// Returns the number of subscribers (exclusive of clients subscribed to patterns) for the
	// specified channels.
	//
	// Note that it is valid to call this command without channels. In this case it will just return
	// an empty list.
	NumSub(ctx context.Context, in *NumSubRequest, opts ...grpc.CallOption) (*NumSubReply, error)
	// Subscribes the client to the given patterns.
	// Supported glob-style patterns:
	//
	// - h?llo subscribes to hello, hallo and hxllo
	// - h*llo subscribes to hllo and heeeello
	// - h[ae]llo subscribes to hello and hallo, but not hillo
	// Use \ to escape special characters if you want to match them verbatim.
	PSubscribe(ctx context.Context, opts ...grpc.CallOption) (Pubsub_PSubscribeClient, error)
	// Returns the number of unique patterns that are subscribed to by clients (that are
	// performed using the PSUBSCRIBE command).
	//
	// Note that this isn't the count of clients subscribed to patterns, but the total number of
	// unique patterns all the clients are subscribed to.
	NumPat(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Int64, error)
}

type pubsubClient struct {
	cc grpc.ClientConnInterface
}

func NewPubsubClient(cc grpc.ClientConnInterface) PubsubClient {
	return &pubsubClient{cc}
}

func (c *pubsubClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Pubsub_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pubsub_ServiceDesc.Streams[0], Pubsub_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pubsubSubscribeClient{stream}
	return x, nil
}

type Pubsub_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pubsubSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubsubSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pubsubSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubsubClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishReply, error) {
	out := new(PublishReply)
	err := c.cc.Invoke(ctx, Pubsub_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubsubClient) Channels(ctx context.Context, in *ChannelsRequest, opts ...grpc.CallOption) (*ChannelsReply, error) {
	out := new(ChannelsReply)
	err := c.cc.Invoke(ctx, Pubsub_Channels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubsubClient) NumSub(ctx context.Context, in *NumSubRequest, opts ...grpc.CallOption) (*NumSubReply, error) {
	out := new(NumSubReply)
	err := c.cc.Invoke(ctx, Pubsub_NumSub_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubsubClient) PSubscribe(ctx context.Context, opts ...grpc.CallOption) (Pubsub_PSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Pubsub_ServiceDesc.Streams[1], Pubsub_PSubscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pubsubPSubscribeClient{stream}
	return x, nil
}

type Pubsub_PSubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type pubsubPSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubsubPSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pubsubPSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubsubClient) NumPat(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, Pubsub_NumPat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubsubServer is the server API for Pubsub service.
// All implementations must embed UnimplementedPubsubServer
// for forward compatibility
type PubsubServer interface {
	// Subscribes the client to the specified channels.
	Subscribe(Pubsub_SubscribeServer) error
	// Posts a message to the given channel.
	Publish(context.Context, *PublishRequest) (*PublishReply, error)
	// Lists the currently active channels.
	//
	// An active channel is a Pub/Sub channel with one or more subscribers (excluding clients
	// subscribed to patterns).
	// If no pattern is specified, all the channels are listed, otherwise if pattern is specified
	// only channels matching the specified glob-style pattern are listed.
	Channels(context.Context, *ChannelsRequest) (*ChannelsReply, error)
	// Returns the number of subscribers (exclusive of clients subscribed to patterns) for the
	// specified channels.
	//
	// Note that it is valid to call this command without channels. In this case it will just return
	// an empty list.
	NumSub(context.Context, *NumSubRequest) (*NumSubReply, error)
	// Subscribes the client to the given patterns.
	// Supported glob-style patterns:
	//
	// - h?llo subscribes to hello, hallo and hxllo
	// - h*llo subscribes to hllo and heeeello
	// - h[ae]llo subscribes to hello and hallo, but not hillo
	// Use \ to escape special characters if you want to match them verbatim.
	PSubscribe(Pubsub_PSubscribeServer) error
	// Returns the number of unique patterns that are subscribed to by clients (that are
	// performed using the PSUBSCRIBE command).
	//
	// Note that this isn't the count of clients subscribed to patterns, but the total number of
	// unique patterns all the clients are subscribed to.
	NumPat(context.Context, *Null) (*Int64, error)
	mustEmbedUnimplementedPubsubServer()
}

// UnimplementedPubsubServer must be embedded to have forward compatible implementations.
type UnimplementedPubsubServer struct {
}

func (UnimplementedPubsubServer) Subscribe(Pubsub_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedPubsubServer) Publish(context.Context, *PublishRequest) (*PublishReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedPubsubServer) Channels(context.Context, *ChannelsRequest) (*ChannelsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Channels not implemented")
}
func (UnimplementedPubsubServer) NumSub(context.Context, *NumSubRequest) (*NumSubReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumSub not implemented")
}
func (UnimplementedPubsubServer) PSubscribe(Pubsub_PSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method PSubscribe not implemented")
}
func (UnimplementedPubsubServer) NumPat(context.Context, *Null) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumPat not implemented")
}
func (UnimplementedPubsubServer) mustEmbedUnimplementedPubsubServer() {}

// UnsafePubsubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubsubServer will
// result in compilation errors.
type UnsafePubsubServer interface {
	mustEmbedUnimplementedPubsubServer()
}

func RegisterPubsubServer(s grpc.ServiceRegistrar, srv PubsubServer) {
	s.RegisterService(&Pubsub_ServiceDesc, srv)
}

func _Pubsub_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PubsubServer).Subscribe(&pubsubSubscribeServer{stream})
}

type Pubsub_SubscribeServer interface {
	Send(*Message) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type pubsubSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubsubSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pubsubSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pubsub_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pubsub_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pubsub_Channels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).Channels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pubsub_Channels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).Channels(ctx, req.(*ChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pubsub_NumSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).NumSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pubsub_NumSub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).NumSub(ctx, req.(*NumSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pubsub_PSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PubsubServer).PSubscribe(&pubsubPSubscribeServer{stream})
}

type Pubsub_PSubscribeServer interface {
	Send(*Message) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type pubsubPSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubsubPSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pubsubPSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Pubsub_NumPat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubsubServer).NumPat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pubsub_NumPat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubsubServer).NumPat(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

// Pubsub_ServiceDesc is the grpc.ServiceDesc for Pubsub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pubsub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.Pubsub",
	HandlerType: (*PubsubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Pubsub_Publish_Handler,
		},
		{
			MethodName: "Channels",
			Handler:    _Pubsub_Channels_Handler,
		},
		{
			MethodName: "NumSub",
			Handler:    _Pubsub_NumSub_Handler,
		},
		{
			MethodName: "NumPat",
			Handler:    _Pubsub_NumPat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Pubsub_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PSubscribe",
			Handler:       _Pubsub_PSubscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pubsub.proto",
}
